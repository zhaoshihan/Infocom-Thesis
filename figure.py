#!/usr/bin/env python
# -*- coding:utf-8 -*-
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from scipy import interpolate


# figure1 绘制不同Uk/Lk比值的competitive ratio
def draw_figure_1():
    percent_50_array = np.array([151.990, 153.588, 167.917, 155.904, 150.081, 152.198, 163.614])
    percent_100_array = np.array([151.990, 153.588, 167.917, 152.020, 149.100, 152.198, 163.614])
    percent_150_array = np.array([151.990, 153.588, 167.917, 152.020, 147.944, 152.198, 163.614])

    offline_array = np.array([159.8, 188.786, 216.693, 207.684, 219.178, 232.595, 267.194])

    x = np.arange(7)
    x_label = np.arange(30, 100, 10)

    # 以offline为准，求出各自的competitive ratio
    percent_50_array = offline_array / percent_50_array
    percent_100_array = offline_array / percent_100_array
    percent_150_array = offline_array / percent_150_array

    width = 0.21875
    fig, ax1 = plt.subplots()
    cur_bar = ax1.bar(x, percent_50_array, width=0.25, label='50%', fc='red', ec='black')
    preempt_bar = ax1.bar(x + 1.2 * width, percent_100_array, width=0.25, label='100%', fc='yellow', ec='black')
    online_bar = ax1.bar(x + 2 * 1.2 * width, percent_150_array, width=0.25, label='150%', fc='blue', ec='black')

    # ax1.set_title('Ratio Comparison')

    ax1.set_ylabel('Competitive Ratio', fontsize=20)
    ax1.set_xlabel('Tasks Count', fontsize=20)
    ax1.set_xticks(x + 1.2 * width)
    ax1.set_xticklabels(labels=x_label)

    ax1.legend(title="M/N", edgecolor='black', loc='lower right', title_fontsize=14, fontsize=14)

    fig.tight_layout()
    ax1.set_axisbelow(True)
    plt.grid(True)
    plt.tick_params(labelsize=15)
    # plt.show()
    plt.savefig(fname='figure1', dpi=300)


# figure2 不同scale下，绘制cur,online,offline比较图(optimal)
def draw_figure_2():
    # cur_array = np.array([101.17, 115.44, 169.64, 196.54, 219.03, 269.98, 307.50, 320.38])
    # preempt_array = np.array([85.96, 106.90, 140.02, 156.65, 210.19, 254.85, 261.30, 317.22])
    # online_array = np.array([101.77, 118.56, 173.42, 209.93, 218.28, 280.82, 305.50, 336.67])

    cur_array = np.array([70.32579828982506, 85.43210008882501, 143.26919426467285, 157.75296382041898, 203.84382509024556, 218.77446879396925, 253.60764404459877, 275.72718763277845])
    greedy_array = np.array([64.41522164618195, 78.4742184515544, 142.55114104223398, 149.97374572670395, 201.54039821475277, 216.8173026081906, 251.6830328547729, 270.0532125109817])
    preempt_array = np.array([69.42013772573421, 80.33209348844451, 140.27134962850013, 152.87374407049816, 199.1997555651019, 217.7563189053515, 243.3605261269146, 268.0981006780598])

    x = np.arange(8)
    x_label = ['0.6x', '0.8x', '1.0x', '1.2x', '1.4x', '1.6x', '1.8x', '2.0x']

    width = 0.25
    fig, ax1 = plt.subplots()
    cur_bar = ax1.bar(x, cur_array, width=0.25, label='PD', fc='blue', ec='black')
    preempt_bar = ax1.bar(x + 1.2 * width, greedy_array, width=0.25, label='Greedy', fc='green', ec='black')
    online_bar = ax1.bar(x + 2 * 1.2 * width, preempt_array, width=0.25, label='Preempt', fc='orange', ec='black')

    # ax1.set_title('Algorithm Comparation')
    ax1.set_ylabel('Cluster Utility', fontsize=20)
    ax1.set_xlabel('Problem Scale', fontsize=20)
    ax1.set_xticks(x+1.2 * width)
    ax1.set_xticklabels(x_label)
    ax1.legend(edgecolor='black', title_fontsize=14, fontsize=14)

    fig.tight_layout()
    ax1.set_axisbelow(True)
    plt.grid(True)
    plt.tick_params(labelsize=15)

    # plt.show()
    plt.savefig(fname='figure2', dpi=300)


# figure3 不同endEDR下，绘制cur,greedy,preempt,MIP的比较图(optimal)
def draw_figure_3():
    cur_array = np.array([121.028, 159.440, 140.868, 134.114, 116.158, 144.556, 147.234])
    greedy_array = np.array([120.340, 156.446, 134.931, 126.365, 110.743, 141.298, 143.118])
    preempt_array = np.array([109.730, 153.859, 129.289, 120.490, 113.091, 140.093, 141.217])
    online_array = np.array([106.209, 143.331, 122.750, 119.837, 113.772, 144.601, 142.564])

    max_welfare = max(cur_array.max(), greedy_array.max(), preempt_array.max(), online_array.max())

    cur_array = cur_array / max_welfare
    greedy_array = greedy_array / max_welfare
    preempt_array = preempt_array / max_welfare
    # online_array = online_array / max_welfare

    x = np.arange(7)
    x_label = ['30', '32', '34', '36', '38', '40', '42']

    width = 0.21875
    fig, ax1 = plt.subplots()
    cur_bar = ax1.bar(x, cur_array, width, label='PD', fc='blue', ec='black')
    greedy_bar = ax1.bar(x + 1.2 * width, greedy_array, width, label='Greedy', fc='green', ec='black')
    preempt_bar = ax1.bar(x + 2.4 * width, preempt_array, width, label='Preempt', fc='orange', ec='black')

    # ax1.set_title('Algorithm Comparation')
    ax1.set_ylabel('Normalized Cluster Utility', fontsize=20)
    ax1.set_xlabel('Time Slots', fontsize=20)
    ax1.set_xticks(x + 1.2 * width)
    ax1.set_xticklabels(x_label)
    ax1.legend(edgecolor='black', loc='lower right', title_fontsize=14, fontsize=14)

    fig.tight_layout()
    ax1.set_axisbelow(True)
    plt.grid(True)
    plt.tick_params(labelsize=15)

    # plt.show()
    plt.savefig(fname='figure3', dpi=300)


# figure4 不同cut_rate下，绘制cur,greedy,preempt的比较图(optimal)
def draw_figure_4():
    cur_array = np.array([142.217, 142.088, 123.247, 100.596, 95.995])
    greedy_array = np.array([136.907, 136.891, 118.237, 97.260, 95.221])
    preempt_array = np.array([133.239, 136.608, 112.565, 98.511, 93.768])

    max_welfare = max(cur_array.max(), greedy_array.max(), preempt_array.max())

    cur_array = cur_array / max_welfare
    greedy_array = greedy_array / max_welfare
    preempt_array = preempt_array / max_welfare
    # online_array = online_array / max_welfare

    x = np.arange(5)
    x_label = ['20%', '25%', '30%', '35%', '40%']

    width = 0.15625
    fig, ax1 = plt.subplots()
    cur_bar = ax1.bar(x, cur_array, width, label='PD', fc='blue', ec='black')
    greedy_bar = ax1.bar(x + 1.2 * width, greedy_array, width, label='Greedy', fc='green', ec='black')
    preempt_bar = ax1.bar(x + 2.4 * width, preempt_array, width, label='Preempt', fc='orange', ec='black')

    # ax1.set_title('Algorithm Comparation')
    ax1.set_ylabel('Normalized Cluster Utility', fontsize=20)
    ax1.set_xlabel('Energy Cutting Rate', fontsize=20)
    ax1.set_xticks(x + 1.2 * width)
    ax1.set_xticklabels(x_label)
    ax1.legend(edgecolor='black', title_fontsize=14, fontsize=14)

    fig.tight_layout()
    ax1.set_axisbelow(True)
    plt.grid(True)
    plt.tick_params(labelsize=15)

    # plt.show()
    plt.savefig(fname='figure4', dpi=300)


# figure5 绘制cur在不同penalty_ratio,task_count的接受率
def draw_figure_5():
    percent_50_array = np.array([1.0, 0.9791666666666666, 0.9642857142857143, 0.96875, 0.9861111111111112, 1.0, 0.9545454545454546, 0.9375, 0.9423076923076923, 0.9464285714285714, 0.95, 0.9453125, 0.9338235294117647, 0.9236111111111112, 0.9210526315789473, 0.94375, 0.9404761904761905, 0.9488636363636364, 0.9565217391304348, 0.9479166666666666, 0.95, 0.9230769230769231, 0.9212962962962963, 0.9330357142857143, 0.9310344827586207, 0.9208333333333333, 0.9314516129032258, 0.921875, 0.9318181818181818, 0.9301470588235294, 0.9428571428571428, 0.9513888888888888, 0.9324324324324325, 0.9210526315789473, 0.9102564102564102, 0.91875])
    percent_100_array = np.array([1.0, 0.9791666666666666, 0.9642857142857143, 0.96875, 0.9861111111111112, 0.9875, 0.9545454545454546, 0.9375, 0.9423076923076923, 0.9464285714285714, 0.9416666666666667, 0.9375, 0.9264705882352942, 0.9166666666666666, 0.9210526315789473, 0.9375, 0.9404761904761905, 0.9431818181818182, 0.9456521739130435, 0.9427083333333334, 0.935, 0.9134615384615384, 0.9120370370370371, 0.9330357142857143, 0.9310344827586207, 0.9208333333333333, 0.9274193548387096, 0.91796875, 0.928030303030303, 0.9264705882352942, 0.9321428571428572, 0.9513888888888888, 0.9155405405405406, 0.9111842105263158, 0.9102564102564102, 0.921875])
    percent_200_array = np.array([1.0, 0.9791666666666666, 0.9464285714285714, 0.96875, 0.9861111111111112, 0.975, 0.9545454545454546, 0.9375, 0.9423076923076923, 0.9464285714285714, 0.9416666666666667, 0.921875, 0.9191176470588235, 0.9027777777777778, 0.9210526315789473, 0.93125, 0.9345238095238095, 0.9431818181818182, 0.9402173913043478, 0.9322916666666666, 0.93, 0.9086538461538461, 0.9120370370370371, 0.9285714285714286, 0.9353448275862069, 0.9166666666666666, 0.9233870967741935, 0.91796875, 0.9242424242424242, 0.9191176470588235, 0.9321428571428572, 0.9513888888888888, 0.9155405405405406, 0.9046052631578947, 0.9006410256410257, 0.91875])
    percent_400_array = np.array([1.0, 0.9791666666666666, 0.9642857142857143, 0.96875, 0.9861111111111112, 1.0, 0.9545454545454546, 0.9479166666666666, 0.9423076923076923, 0.9464285714285714, 0.95, 0.9453125, 0.9338235294117647, 0.9305555555555556, 0.9210526315789473, 0.94375, 0.9404761904761905, 0.9488636363636364, 0.9565217391304348, 0.953125, 0.955, 0.9278846153846154, 0.9259259259259259, 0.9330357142857143, 0.9396551724137931, 0.925, 0.9354838709677419, 0.92578125, 0.9393939393939394, 0.9338235294117647, 0.9428571428571428, 0.9513888888888888, 0.9324324324324325, 0.9276315789473685, 0.9134615384615384, 0.91875])

    x = np.arange(36)

    x_ticks = np.arange(0, 40, 5)
    x_label = ['1.0x', '2.0x', '3.0x', '4.0x', '5.0x', '6.0x', '7.0x', '8.0x']

    fig, ax2 = plt.subplots()
    xnew = np.arange(0, 35, 0.001)

    f = interpolate.interp1d(x, percent_50_array, kind='cubic')
    ynew = f(xnew)
    cur_50_plot = ax2.plot(x, percent_50_array, label='0.5x', c='red', fillstyle='none', marker='^',
                            linestyle='')
    ax2.plot(xnew, ynew, c='red', linestyle='-')


    f = interpolate.interp1d(x, percent_100_array, kind='cubic')
    ynew = f(xnew)
    cur_100_plot = ax2.plot(x, percent_100_array, label='1.0x', c='yellow', fillstyle='none', marker='o',
                            linestyle='')
    ax2.plot(xnew, ynew, c='yellow', linestyle='-')


    f = interpolate.interp1d(x, percent_200_array, kind='cubic')
    ynew = f(xnew)
    cur_200_plot = ax2.plot(x, percent_200_array, label='2.0x', c='blue', fillstyle='none', marker='x',
                            linestyle='')
    ax2.plot(xnew, ynew, c='blue', linestyle='-')


    # f = interpolate.interp1d(x, percent_400_array, kind='cubic')
    # ynew = f(xnew)
    # cur_400_plot = ax2.plot(x, percent_400_array, label='4.0x', c='cyan', fillstyle='none', marker='o',
    #                            linestyle='')
    # ax2.plot(xnew, ynew, c='cyan', linestyle='-')

    # ax2.set_title('Electricity Usage')
    ax2.set_ylabel('Acceptance Rate', fontsize=20)
    ax2.set_xlabel('Problem Scale', fontsize=20)

    ax2.set_xticks(x_ticks)
    ax2.set_xticklabels(x_label)

    ax2.legend(title='Penalty Weight', edgecolor='black', title_fontsize=14, fontsize=14)

    fig.tight_layout()
    # ax2.set(ylim=(0.88, 1.02))
    ax2.set_axisbelow(True)
    plt.grid(True)
    plt.tick_params(labelsize=15)
    # plt.grid(b=True, linestyle='--')
    # plt.show()
    plt.savefig(fname='figure5', dpi=300)


# figure6 绘制cur,greedy,preempt,MIP,Optimum不同timeslot用电量
def draw_figure_6():
    # cur_array = np.array([6.961250167191369, 7.518304126787862, 8.449505304899489, 8.449505304899489, 8.449505304899489, 10.326866084076302, 11.806874680479275, 16.224220124242375, 17.42885444242656, 17.247856829489173, 17.19951846274695, 17.39723158887735, 17.39723158887735, 17.39723158887735, 17.39723158887735, 17.39723158887735, 16.998091176771762, 17.54347739469505, 17.829675472884148, 17.829675472884148, 17.829675472884148, 17.864153556146476, 17.33067636830305, 17.885094464005405, 18.09862136319141, 17.501682074173257, 17.452774483518336, 17.536401469232306, 16.810169165108256, 15.99257913979381, 15.54874041161483, 14.957360377467156, 13.254756969672473, 11.778610364825148, 11.166709592947202, 8.236101846268303])
    # greedy_array = np.array([6.961250167191369, 7.494089535029354, 8.235158187809647, 8.235158187809647, 8.235158187809647, 9.938855880702958, 11.355719506912445, 16.122818820283584, 17.398884078121284, 18.065581298509816, 18.01730320131818, 18.11698259731805, 18.11698259731805, 18.11698259731805, 18.11698259731805, 18.11698259731805, 18.26370536928281, 18.08403346393573, 18.85054729352148, 18.85054729352148, 18.85054729352148, 18.461535290931128, 18.784145341106765, 18.880068213227993, 18.861413540128034, 19.310118451108387, 18.5982733083906, 18.5982733083906, 18.89783784084132, 18.883038126342797, 18.273063237882106, 14.210842225084493, 12.785789984797752, 10.112742085590872, 8.078200076134088, 7.532149489874924])
    # preempt_array = np.array([6.961250167191369, 7.494089535029354, 8.235158187809647, 8.235158187809647, 8.235158187809647, 9.912652645771214, 11.308140296428972, 16.17206129765526, 17.40709680587111, 18.889375441412017, 18.039352149955533, 18.210827794676394, 18.210827794676394, 18.210827794676394, 18.210827794676394, 18.210827794676394, 18.193507043769014, 18.227764646934364, 17.754880406339975, 18.353241609693228, 18.71299031665318, 17.916323223798205, 18.0333121240153, 18.474407418910282, 18.820138559218787, 19.234965189665417, 18.639388034752937, 18.495796827554365, 17.459313376156842, 15.49068430082077, 13.54121485984119, 11.455618586563435, 10.628829364038024, 8.753366237322188, 8.236101846268303, 7.456029580183784])
    # online_array = np.array([6.961250167191369, 6.961250167191369, 6.961250167191369, 6.961250167191369, 7.702318819971662, 9.116875266265042, 9.912652645771214, 13.649218598857264, 14.798834016279628, 15.383445699564145, 15.380023928018915, 17.239762429933755, 16.005844371675284, 16.460610063281614, 16.460610063281614, 15.713014593282622, 15.664107002627702, 17.15031963539079, 17.729099242801084, 17.19277424637347, 18.515262135515673, 18.515262135515673, 17.237754090063213, 17.891799301879402, 17.847701547022012, 17.797022255563366, 18.651034797682435, 17.63205986819503, 17.554332599928134, 17.249668102342937, 17.202553327030504, 15.607978522396557, 15.607978522396557, 13.792757861603997, 12.768404410550755, 9.646370122892357])
    # offline_array = np.array([6.961250167191369, 7.494089535029354, 8.235158187809647, 8.235158187809647, 8.235158187809647, 9.18036637345516, 10.570551152943715, 14.54906247335476, 15.778320857197103, 15.451686544437548, 15.451686544437548, 15.74341599786454, 15.194584864851066, 15.194584864851066, 15.194584864851064, 15.78147595271011, 15.78147595271011, 15.593016851460384, 14.911910231890934, 15.595832594287904, 15.641924442115307, 15.56407491872713, 15.556043025745296, 15.736789621629288, 15.41505207140795, 16.018188287476825, 15.410155308869737, 15.41302023535235, 15.881869093879041, 15.74562538645243, 15.69750170256943, 15.55215517177765, 15.065140376857645, 13.895441164658145, 12.519372545307869, 9.642579356737421])

    cur_array = np.array([6.949556804188368, 6.949556804188368, 7.6683419152851435, 8.60907039386108, 12.599290799507086, 12.599290799507086, 14.861478280014806, 15.212275998470082, 15.887464727801161, 17.66359777633356, 17.66359777633356, 17.279018363384935, 17.279018363384935, 17.279018363384935, 17.700447111566742, 18.560646700553587, 18.560646700553587, 18.178419580217962, 18.178419580217962, 17.845585227808925, 17.845585227808925, 17.845585227808925, 17.845585227808925, 17.37899826082113, 16.86191314865323, 16.145095084410105, 14.443763560532432, 15.194274782228504, 14.215345220904606, 12.79570837625669, 12.79570837625669, 11.857211652188592, 12.078158449244185, 11.149124840887032, 10.543476841651387, 8.710369626822269])
    greedy_array = np.array([6.949556804188368, 6.949556804188368, 7.545955085402446, 8.35688618774742, 12.366162668196225, 12.366162668196225, 14.633788593883871, 14.971433041756537, 15.72800630504209, 17.58099308427733, 17.588297717841645, 17.629528585199772, 17.629528585199772, 18.57025706377571, 18.57025706377571, 18.97920029307081, 18.97920029307081, 19.22615947360045, 19.22615947360045, 18.888713710532443, 18.888713710532443, 18.888713710532443, 19.334894505859708, 19.334894505859708, 19.334894505859708, 19.07668053179379, 17.24994237562963, 17.24994237562963, 17.24343245969235, 16.86277390151901, 16.86277390151901, 17.344448445323255, 17.344448445323255, 16.283981629567155, 13.264333296112865, 8.797330164226562])
    preempt_array = np.array([6.949556804188368, 6.949556804188368, 7.545955085402446, 8.35688618774742, 12.3430275651487, 12.3430275651487, 14.609957222279101, 14.945914771725583, 15.71261889022881, 17.576498410596876, 18.067560532720996, 18.623036299794546, 18.623036299794546, 19.059855808096504, 19.059855808096504, 19.345693873780558, 19.345693873780558, 19.345052796522705, 19.345052796522705, 19.44055235806766, 19.392385009280925, 19.392385009280925, 19.392385009280925, 18.922385002131442, 18.499315364903158, 18.957034545040734, 15.76912654508228, 17.964878803864764, 15.98463183488284, 14.275126068795872, 13.365749675332856, 11.377292260039356, 10.396131889281966, 9.692780597330685, 8.047467812062914, 8.047467812062914])
    online_array = np.array([6.949556804188368, 6.949556804188368, 6.949556804188368, 7.760487906533341, 10.406308347449858, 11.15736636723496, 14.099775497269018, 13.512764983119242, 15.84673871548042, 16.702859393992956, 16.250172655852428, 15.706998236260317, 15.282529286186174, 15.762360437508548, 16.15782794556894, 17.040777621269758, 16.854515255105728, 18.677275266136363, 18.175103696059583, 18.968186761389525, 18.07966775325168, 19.002297538244715, 19.23738882830121, 18.12038822370163, 17.574053658361137, 18.514372263490923, 16.3683771387235, 17.38571742361558, 15.293425301876368, 15.470617597778066, 15.658458059824, 15.445055138154268, 15.01558823146133, 15.303303311902539, 14.680053155208475, 11.474321627469259])
    offline_array = np.array([6.949556804188368, 6.949556804188368, 7.545955085402446, 7.545955085402446, 11.447741952286087, 11.447741952286087, 13.169009577746424, 13.169009577746422, 14.43779135251316, 15.717569018639628, 15.717569018639628, 15.823044230420278, 15.823044230420278, 16.145905239485266, 16.145905239485266, 16.004882027075837, 15.958056610611193, 16.004644918244704, 16.826091156179462, 16.97946489251434, 16.979464892514343, 16.979464892514343, 16.97946489251434, 16.979464892514343, 16.547550561323316, 16.693157064090634, 16.59998044882361, 16.59998044882361, 16.596903591764242, 16.596903591764242, 15.871015334896263, 15.871015334896262, 15.727459348679409, 15.631621333866505, 15.486518963591116, 11.552808778411256])

    x = np.arange(36)
    x_ticks = np.array([-1, 3, 7, 11, 15, 19, 23, 27, 31, 35])
    # x_ticks = np.array([1, 5, 9, 13, 17, 21, 25, 29, 33])

    fig, ax2 = plt.subplots()
    cur_plot = ax2.plot(x, cur_array, label='PD', c='blue', fillstyle='none', marker='x',
                        linestyle='-')
    greedy_plot = ax2.plot(x, greedy_array, label='Greedy', c='green', fillstyle='none', marker='^',
                            linestyle='-')
    preempt_plot = ax2.plot(x, preempt_array, label='Preempt', c='orange', fillstyle='none', marker='p',
                            linestyle='-')
    online_plot = ax2.plot(x, online_array, label='MIP', c='gray', fillstyle='none', marker='o',
                               linestyle='-')
    offline_plot = ax2.plot(x, offline_array, label='Optimum', c='pink', fillstyle='none', marker='*',
                               linestyle='-')

    # ax2.set_title('Electricity Usage')
    ax2.set_ylabel('Electricity Usage(kwh)', fontsize=20)
    ax2.set_xlabel('Time Slots', fontsize=20)

    ax2.set_xticks(x_ticks)
    ax2.set_xticklabels(x_ticks+1)

    ax2.legend(edgecolor='black', title_fontsize=14, fontsize=14)

    fig.tight_layout()
    ax2.set(xlim=(-1, 37))
    ax2.set_axisbelow(True)
    plt.grid(True)
    plt.tick_params(labelsize=15)
    # plt.show()
    plt.savefig(fname='figure6', dpi=300)


# figure7 AMEDR,固定dispatch rate，绘制不同energy cut的competitive ratio
def draw_figure_7():
    cut_10_array = np.array([1.11, 1.0654310330442718, 1.0045170392975535, 1.0295293837823365, 1.0593041659388303, 1.0288645876782374, 1.0147845874788373, 1.0234068219769688, 1.0459402456712297, 1.0244314419794562, 1.0385235566567639, 1.0242605388918504, 1.0252012768397427, 1.0446367197130213, 1.0302902979600232, 1.0273534836943166, 1.039625910663253, 1.0285739218516075, 1.0360990716701566, 1.0342624302528145, 1.0265451556972998, 1.0379431722146342, 1.0300525742239905, 1.0236899283106589, 1.0357137293455412, 1.027678483016785, 1.0241740290832482, 1.0253475664339762, 1.031886438049853, 1.029712221649449, 1.0293000125785141, 1.028295996662411, 1.0259706302758393, 1.0366435226289032, 1.0278277523860542, 1.0298605793853475, 1.028542479342402, 1.0255285728904158, 1.0331485940284524, 1.0281983703201636])
    cut_15_array = np.array([1.1571519177628706, 1.0734466806234528, 1.068566688736844, 1.0621451653429281, 1.017164380111347, 1.0409513998162314, 1.0147995036006623, 1.026278303036887, 1.0248897548071785, 1.0439816365674226, 1.038361814661232, 1.0386888653514534, 1.0253610409571043, 1.0398533027128354, 1.0364044523346931, 1.0292664348403266, 1.0427845995261251, 1.0300469388231923, 1.0280938635395553, 1.0319302527499965, 1.029707466721889, 1.0391033732506552, 1.0299521255087716, 1.0271806212235288, 1.0192138676589562, 1.0271159715224654, 1.0241510172657504, 1.0273472650060704, 1.029125088474912, 1.0364916351632922, 1.023320236392098, 1.0246173190665384, 1.023897616293509, 1.02515432592763, 1.0301833560778542, 1.0285218408076358, 1.0275648155866017, 1.0365520873131, 1.0251613501112828, 1.0340603154732455])
    cut_20_array = np.array([1.181875861432351, 1.0269716916366431, 1.0271655662360306, 1.059269630701794, 1.0324411555499151, 1.040737219123342, 1.0424743298788537, 1.045782977187231, 1.0448493005320756, 1.0197283312003642, 1.0446885947609745, 1.039688203156144, 1.031495498783653, 1.0353049986506833, 1.0355403049541527, 1.0301745625509982, 1.0350033466205895, 1.0317654446213709, 1.0362964426351717, 1.0372404522574545, 1.0295909670405239, 1.024792564805751, 1.0265437069179797, 1.027532877291534, 1.026183625908657, 1.028101662125157, 1.0262752632267245, 1.0295354344172056, 1.0309482400280845, 1.0292530371872535, 1.0258015260902098, 1.02707175551284, 1.026437852492012, 1.0300595900556688, 1.0275538966286168, 1.0265553412820265, 1.026846902183908, 1.0291718544051063, 1.0310244123225776, 1.0302520690049812])
    cut_25_array = np.array([1.1876635287579813, 1.0943396150148392, 1.038547680969905, 1.0682944364209332, 1.0586888425889813, 1.0487019360092362, 1.0332411877053316, 1.031830843357123, 1.0455033203337376, 1.0231458092121122, 1.0195069888838233, 1.037654866055839, 1.0286805939409431, 1.0287484029793257, 1.0282419378952161, 1.0326814662787394, 1.0270379818717754, 1.0332332074806256, 1.029102725479472, 1.02922360569438, 1.0345334837620985, 1.0296716773781895, 1.0299422504239417, 1.0274493997546956, 1.0330581209470386, 1.0285082313995666, 1.0305529575953174, 1.029479805884465, 1.0265207428696719, 1.028815833901969, 1.0316768207898452, 1.026944974866542, 1.0266301486497844, 1.0254777088472602, 1.0294205916768662, 1.03100692084927, 1.0305366066348611, 1.0258201016655688, 1.0350983024426188, 1.025575904029771])

    x = np.arange(1, 41)
    x_ticks = np.arange(1, 43, 3)
    # x_ticks = np.array([1, 5, 9, 13, 17, 21, 25, 29, 33])

    fig, ax2 = plt.subplots()
    xnew = np.arange(1, 40, 0.001)

    f = interpolate.interp1d(x, cut_10_array, kind='cubic')
    ynew = f(xnew)
    # cut_10_plot = ax2.plot(x, cut_10_array, label='10%', c='red', fillstyle='none', marker='o',
    #                     linestyle='')
    ax2.plot(xnew, ynew, label='10%', c='red', linestyle='-')


    f = interpolate.interp1d(x, cut_15_array, kind='cubic')
    ynew = f(xnew)
    # cut_15_plot = ax2.plot(x, cut_15_array, label='15%', c='yellow', fillstyle='none', marker='^',
    #                         linestyle='')
    ax2.plot(xnew, ynew, label='15%', c='yellow', linestyle='-')


    f = interpolate.interp1d(x, cut_20_array, kind='cubic')
    ynew = f(xnew)
    # cut_20_plot = ax2.plot(x, cut_20_array, label='20%', c='olive', fillstyle='none', marker='p',
    #                         linestyle='')
    ax2.plot(xnew, ynew, label='20%', c='olive', linestyle='-')


    f = interpolate.interp1d(x, cut_25_array, kind='cubic')
    ynew = f(xnew)
    # cut_25_plot = ax2.plot(x, cut_25_array, label='25%', c='blue', fillstyle='none', marker='x',
    #                            linestyle='')
    ax2.plot(xnew, ynew, label='25%', c='blue', linestyle='-')

    # ax2.set_title('Electricity Usage')
    ax2.set_ylabel('Competitive Ratio', fontsize=16)
    ax2.set_xlabel('Cluster Count', fontsize=16)

    ax2.set_xticks(x_ticks)
    ax2.set_xticklabels(x_ticks*10)

    ax2.legend(title='Energy Cutting Rate', edgecolor='black', title_fontsize=12, fontsize=12)

    fig.tight_layout()
    ax2.set(xlim=(1, 40), ylim=(1.0, 1.19))
    ax2.set_axisbelow(True)
    plt.grid(True)
    plt.tick_params(labelsize=12)
    # plt.show()
    plt.savefig(fname='figure7', dpi=300)


# figure8 AMEDR,固定energy cut=25%，绘制不同dispatch rate的competitive ratio
def draw_figure_8():
    dispatch_40_array = np.array([1.1811074218774475, 1.073066235733906, 1.0713944391867036, 1.042436473602189, 1.0979322073675373, 1.052566489529136, 1.0333134576296765, 1.0629157505389515, 1.0686071545633906, 1.046731108602498, 1.047294536994991, 1.0569271268712723, 1.0671321634502573, 1.0483594177776392, 1.0429886214880424, 1.0469201910166743, 1.0440083656372579, 1.0373850567592104, 1.04712101036802, 1.046058747195482, 1.0488180943032883, 1.042005653956914, 1.0398145100368612, 1.0279522251675273, 1.0404716060804773, 1.0398908630013355, 1.038924774362635, 1.0367382441005921, 1.0416167014631463, 1.0359767162254532, 1.0267651500944504, 1.0396567365200453, 1.0378065706403072, 1.0350698147831852, 1.0493565759789225, 1.0460487200537305, 1.0346512619111288, 1.0359734205938824, 1.0462426894750712, 1.0398982132439787])
    dispatch_50_array = np.array([1.1690365630027633, 1.0631354295510955, 1.0638330325709828, 1.032106577910446, 1.0411909555177081, 1.0448319691817276, 1.0518249949361844, 1.0450448616045358, 1.033948704217341, 1.036287030773034, 1.028752965148033, 1.0457716554285423, 1.0476047483978688, 1.0458498870757058, 1.0421721342829173, 1.0316265228962764, 1.0346081377313756, 1.0441706810618225, 1.040433096297372, 1.0349945091115818, 1.0357003828917586, 1.0385699287644499, 1.0393398209201368, 1.0293593902795062, 1.0454172640740365, 1.031790808050951, 1.0303823421887686, 1.0421561557772745, 1.0326476869180494, 1.0345111290237063, 1.0312727413042515, 1.0412805464205857, 1.0302721701264934, 1.0345580544066861, 1.0322638985223298, 1.0293972020024469, 1.0329029150792923, 1.0294321101090724, 1.027273518592978, 1.0360143843834342])
    dispatch_60_array = np.array([1.158995798556613, 1.0634837480292443, 1.0618443425208333, 1.0316479793496467, 1.0397089052831774, 1.0458121612980484, 1.0400463311199823, 1.0299280787531266, 1.0325997638019004, 1.026148153634228, 1.0185584012302076, 1.0380251441177029, 1.0359949662907753, 1.0319136464826244, 1.0295840861591967, 1.0308323226556995, 1.0272365009514828, 1.0268148758365143, 1.034838462267745, 1.0307152693265613, 1.0409629105224358, 1.0358372340963513, 1.0252274991459602, 1.024996676774516, 1.0288584410363553, 1.0266591160137462, 1.033615212377357, 1.0264708115683834, 1.0264802073053247, 1.0268299631581903, 1.0285445867078928, 1.0252519584537563, 1.0275157378556872, 1.0340882708908634, 1.0300864307083153, 1.0245987914243513, 1.0227757849053618, 1.0279333305111935, 1.026749180680339, 1.0298992262573168])
    dispatch_70_array = np.array([1.1472073322908412, 1.057861845683521, 1.052565969824921, 1.0288543161072445, 1.0394035699745348, 1.0459959278997741, 1.0375508354564191, 1.020965209964458, 1.013949950018122, 1.0208605872487315, 1.026998309160773, 1.0314904093392403, 1.030178444844648, 1.0204986829963636, 1.0206546778716599, 1.0216691554764752, 1.021755568409696, 1.021894691442604, 1.023010202017447, 1.0266490854127694, 1.0220706709988518, 1.0195510944749655, 1.0260149447195772, 1.0225720675124463, 1.0163202343500637, 1.015567451007108, 1.024575905779012, 1.0222967622441, 1.0220337940879385, 1.0165126066824854, 1.0158201691334756, 1.0192553301488976, 1.0217826993507475, 1.028869944236704, 1.0240414944510534, 1.0191789526149753, 1.0202175497036043, 1.0210600416185525, 1.0222769477657967, 1.020455192738954])
    dispatch_80_array = np.array([1.1495500112196653, 1.0590569544240773, 1.0386302672632723, 1.0200179744737528, 1.0400581919057426, 1.017559934940997, 1.0187631417954102, 1.0153273891015056, 1.0199760303936176, 1.0192833141607143, 1.011300057252136, 1.0182665289523085, 1.0189008538157713, 1.0122807668757179, 1.0171609541941184, 1.0179104992797232, 1.0198597538330543, 1.0129101306765436, 1.0126276572200106, 1.0152649820720119, 1.0122720194691166, 1.0174300527387319, 1.0146196414390785, 1.0193279889496505, 1.0090815905971067, 1.0115466529417088, 1.0203786198583766, 1.0116803484653039, 1.0145429076166068, 1.0104342021990964, 1.0094410155926037, 1.0147910558248645, 1.0135770808049491, 1.013272597201661, 1.0143276031206443, 1.0140132005035822, 1.0123512116250566, 1.0122743726466015, 1.0107673346928903, 1.0120270282422958])

    x = np.arange(1, 41)
    x_ticks = np.arange(1, 43, 3)
    # x_ticks = np.array([1, 5, 9, 13, 17, 21, 25, 29, 33])

    fig, ax2 = plt.subplots()
    xnew = np.arange(1, 40, 0.001)

    f = interpolate.interp1d(x, dispatch_40_array, kind='cubic')
    ynew = f(xnew)
    dispatch_40_plot = ax2.plot(x, dispatch_40_array, label='40%', c='red', fillstyle='none', marker='o',
                        linestyle='')
    ax2.plot(xnew, ynew, c='red', linestyle='-')


    f = interpolate.interp1d(x, dispatch_50_array, kind='cubic')
    ynew = f(xnew)
    dispatch_50_plot = ax2.plot(x, dispatch_50_array, label='50%', c='yellow', fillstyle='none', marker='^',
                            linestyle='')
    ax2.plot(xnew, ynew, c='yellow', linestyle='-')


    f = interpolate.interp1d(x, dispatch_60_array, kind='cubic')
    ynew = f(xnew)
    dispatch_60_plot = ax2.plot(x, dispatch_60_array, label='60%', c='blue', fillstyle='none', marker='x',
                            linestyle='')
    ax2.plot(xnew, ynew, c='blue', linestyle='-')


    f = interpolate.interp1d(x, dispatch_70_array, kind='cubic')
    ynew = f(xnew)
    dispatch_70_plot = ax2.plot(x, dispatch_70_array, label='70%', c='olive', fillstyle='none', marker='p',
                               linestyle='')
    ax2.plot(xnew, ynew, c='olive', linestyle='-')


    f = interpolate.interp1d(x, dispatch_80_array, kind='cubic')
    ynew = f(xnew)
    dispatch_80_plot = ax2.plot(x, dispatch_80_array, label='80%', c='cyan', fillstyle='none', marker='s',
                               linestyle='')
    ax2.plot(xnew, ynew, c='cyan', linestyle='-')

    # ax2.set_title('Electricity Usage')
    ax2.set_ylabel('Competitive Ratio', fontsize=16)
    ax2.set_xlabel('Cluster Count', fontsize=16)

    ax2.set_xticks(x_ticks)
    ax2.set_xticklabels(x_ticks*10)

    ax2.legend(title='EDR Dispatch Rate', edgecolor='black', title_fontsize=12, fontsize=12)

    fig.tight_layout()
    ax2.set(xlim=(0, 41), ylim=(1.0, 1.19))
    ax2.set_axisbelow(True)
    plt.grid(True)
    plt.tick_params(labelsize=12)
    # plt.show()
    plt.savefig(fname='figure8', dpi=300)


if __name__ == '__main__':
    # draw_figure_1()
    # draw_figure_2()
    # draw_figure_3()
    # draw_figure_4()
    # draw_figure_5()
    # draw_figure_6()

    # draw_figure_7()
    # draw_figure_8()
